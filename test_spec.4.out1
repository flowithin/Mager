hhhhhhhhhh001111:Computer System Design
July 1983
Butler W. Lampson
Computer Science Laboratory
Xerox Palo Alto Research Center
Palo Alto, CA 94304

https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/acrobat-17.pdf

This paper was originally presented at the 9th ACM Symposium on Operating
Systems Principles and appeared in Operating Systems Review 15, 5, Oct.
1983, p 33-48. The present version is slightly revised.

Abstract

Studying the design and implementation of a number of computer has led to
some general hints for system design. They are described here and
illustrated by many examples, ranging from hardware such as the Alto and
the Dorado to application programs such as Bravo and Star.

1. Introduction

Designing a computer system is very different from designing an algorithm:

    The external interface (that is, the requirement) is less precisely
    defined, more complex, and more subject to change.

    The system has much more internal structure, and hence many internal interfaces.

    The measure of success is much less clear.

The designer usually finds himself floundering in a sea of possibilities,
unclear about how one choice will limit his freedom to make other choices,
or affect the size and performance of the entire system. There probably
isn't a â€˜best' way to build the system, or even any major part of it; much
more important is to avoid choosing a terrible way, and to have clear
division of responsibilities among the parts.

I have designed and built a number of computer systems, some that worked
and some that didn't.  I have also used and studied many other systems,
both successful and unsuccessful. From this experience come some general
hints for designing successful systems. I claim no originality for them;
most are part of the folk wisdom of experienced designers. Nonetheless,
even the expert often forgets, and after the second system [6] comes the
fourt